/*
 * pololu.h
 *
 *  Created on: Nov 27, 2013
 *      Author: DiamondS
 */

#ifndef POLOLU_H_
#define POLOLU_H_

//	COMMANDS:
#define POLOLU_COMMAND_BYTE						0xAA
#define POLOLU_COMMAND_EXIT_SAFE_START			0x03
#define POLOLU_COMMAND_MOTOR_FORWARD			0x05
#define POLOLU_COMMAND_MOTOR_REVERSE			0x06
#define POLOLU_COMMAND_MOTOR_FORWARD_7BIT		0x09
#define POLOLU_COMMAND_MOTOR_REVERSE_7BIT		0x0A
#define POLOLU_COMMAND_MOTOR_BRAKE				0x12
#define POLOLU_COMMAND_GET_VARIABLE			    0x21
#define POLOLU_COMMAND_SET_MOTOR_LIMIT			0x22
#define POLOLU_COMMAND_GET_FIRMWARE_VERSION	    0x42
#define POLOLU_COMMAND_STOP_MOTOR				0x60

//	VARIABLES:
// Status Flag Registers:
#define POLOLU_VARIABLE_ERROR_STATUS				0x00
#define POLOLU_VARIABLE_ERRORS_OCCURED				0X01
#define POLOLU_VARIABLE_SERIAL_ERRORS_OCCURED		0x02
#define POLOLU_VARIABLE_LIMIT_STATUS				0x03
#define POLOLU_VARIABLE_RESET_FLAGS					0x7F
// RC Channel Inputs:
#define POLOLU_VARIABLE_RC1_UNLIMITED_RAW_VALUE		0x04
#define POLOLU_VARIABLE_RC1_RAW_VALUE				0x05
#define POLOLU_VARIABLE_RC1_SCALED_VALUE			0x06
#define POLOLU_VARIABLE_RC2_UNLIMITED_RAW_VALUE		0x08
#define POLOLU_VARIABLE_RC2_RAW_VALUE				0x09
#define POLOLU_VARIABLE_RC2_SCALED_VALUE			0x0A
// Analog Channel Input:
#define POLOLU_VARIABLE_AN1_UNLIMITED_RAW_VALUE		0x0C
#define POLOLU_VARIABLE_AN1_RAW_VALUE				0x0D
#define POLOLU_VARIABLE_AN1_SCALED_VALUE			0x0E
#define POLOLU_VARIABLE_AN2_UNLIMITED_RAW_VALUE		0x10
#define POLOLU_VARIABLE_AN2_RAW_VALUE				0x20
#define POLOLU_VARIABLE_AN2_SCALED_VALUE			0x30
// Diagnostic Variables:
#define POLOLU_VARIABLE_TARGET_SPEED				0x14
#define POLOLU_VARIABLE_SPEED						0x15
#define POLOLU_VARIABLE_BRAKE_AMOUNT				0x16
#define POLOLU_VARIABLE_INPUT_VOLTAGE				0x17
#define POLOLU_VARIABLE_TEMPERATURE					0x18
#define POLOLU_VARIABLE_RC_PERIOD					0x1A
#define POLOLU_VARIABLE_BAUDRATE_REGISTER			0x1B
#define POLOLU_VARIABLE_SYSTEM_TIME_LOW				0x1C
#define POLOLU_VARIABLE_SYSTEM_TIME_HIGH			0x1D
// Temporary Motor Limits:
#define POLOLU_VARIABLE_MAX_SPEED_FORWARD			0x1E
#define POLOLU_VARIABLE_MAX_ACCELERATION_FORWARD	0x1F
#define POLOLU_VARIABLE_MAX_DECELERATION_FORWARD	0x20
#define POLOLU_VARIABLE_BRAKE_DURATION_FORWARD		0x21
#define POLOLU_VARIABLE_MAX_SPEED_REVERSE			0x24
#define POLOLU_VARIABLE_MAX_ACCELERATION_REVERSE	0x25
#define POLOLU_VARIABLE_MAX_DECELERATION_REVERSE	0x26
#define POLOLU_VARIABLE_BRAKE_DURATION_REVERSE		0x27

//  ERRORS:
#define POLOLU_ERROR_SAFE_START						0x001
#define POLOLU_ERROR_INVALID_CHANNEL				0x002
#define POLOLU_ERROR_SERIAL							0x004
#define POLOLU_ERROR_TIMEOUT						0x008
#define POLOLU_ERROR_SWITCH							0x010
#define POLOLU_ERROR_LOW_VIN						0x020
#define POLOLU_ERROR_HIGH_VIN						0x040
#define POLOLU_ERROR_TEMPERATURE					0x080
#define POLOLU_ERROR_DRIVER							0x100
#define POLOLU_ERROR_LINE							0x200

extern const char POLOLU_Errors[10][32];

#define POLOLU_ERROR_CRC	0xFFFF

int POLOLU_Init(char *device, int baudrate);
void POLOLU_ExitSafeStart(int deviceNumber);
void POLOLU_MotorForward(int deviceNumber, int speed);
void POLOLU_MotorReverse(int deviceNumber, int speed);
void POLOLU_MotorBreake(int deviceNumber, int brakeAmount);
int POLOLU_GetVariable(int deviceNumber, int variableID);
int POLOLU_SetMotorLimit(int deviceNumber, int limitID, int limitValue);
int POLOLU_GetFirmwareVersion(int deviceNumber);
void POLOLU_StopMotor(int deviceNumber);

#endif /* POLOLU_H_ */
